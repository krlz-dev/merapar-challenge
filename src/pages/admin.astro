---
import fs from 'fs';
import path from 'path';

let dynamicString = "default dynamic string";

try {
  const dataPath = path.join(process.cwd(), 'src/data/text.json');
  const data = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
  dynamicString = data.dynamicString || dynamicString;
} catch (error) {
  console.error('Error reading dynamic text:', error);
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Merapar Challenge - Admin</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
		<style>
			body {
				background-color: #f8f9fa;
				font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
			}
			.navbar {
				background-color: #ffffff !important;
				border-bottom: 1px solid #e9ecef;
				box-shadow: 0 1px 3px rgba(0,0,0,0.1);
			}
			.navbar-brand, .navbar-text {
				color: #495057 !important;
				font-weight: 300;
			}
			.card {
				border: 1px solid #e9ecef;
				box-shadow: 0 2px 4px rgba(0,0,0,0.05);
			}
			.card-header {
				background-color: #ffffff;
				border-bottom: 1px solid #e9ecef;
			}
			.card-header h2 {
				color: #495057;
				font-weight: 300;
				font-size: 1.5rem;
			}
			.alert-info {
				background-color: #f8f9fa;
				border-color: #e9ecef;
				color: #495057;
			}
			.btn-primary {
				background-color: #6c757d;
				border-color: #6c757d;
				font-weight: 300;
			}
			.btn-primary:hover {
				background-color: #5a6268;
				border-color: #545b62;
			}
			.form-control {
				border-color: #ced4da;
			}
			.form-control:focus {
				border-color: #6c757d;
				box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
			}
			.badge {
				font-weight: 300;
			}
			.bg-success {
				background-color: #a8d5a8 !important;
			}
			.bg-danger {
				background-color: #f5a5a5 !important;
			}
			.bg-warning {
				background-color: #f5d5a5 !important;
			}
		</style>
	</head>
	<body>
		<nav class="navbar">
			<div class="container">
				<a class="navbar-brand" href="/">‚Üê Back to Main Page</a>
				<span class="navbar-text">Admin Panel</span>
			</div>
		</nav>

		<div class="container mt-5">
			<div class="row justify-content-center">
				<div class="col-md-8">
					<div class="card">
						<div class="card-header">
							<h2 class="mb-0">Merapar Challenge</h2>
						</div>
						<div class="card-body">
							<div class="mb-4">
								<h5>Current Text:</h5>
								<div class="alert alert-info" id="currentText">
									<strong>{dynamicString}</strong>
								</div>
								<div class="mt-2">
									<span class="badge bg-success" id="connectionStatus">Connecting...</span>
								</div>
							</div>

							<form id="updateForm" class="mt-4">
								<div class="mb-3">
									<label for="newText" class="form-label">New Text:</label>
									<input type="text" class="form-control" id="newText" placeholder="Enter new dynamic text" required>
								</div>
								<button type="submit" class="btn btn-primary">Update Text</button>
							</form>
							
							<div id="message" class="mt-3"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<script>
			// Server-Sent Events connection
			let eventSource;
			const connectionStatus = document.getElementById('connectionStatus');
			const currentTextElement = document.getElementById('currentText');
			
			function connectSSE() {
				eventSource = new EventSource('/api/events');
				
				eventSource.onopen = function() {
					connectionStatus.textContent = 'Connected';
					connectionStatus.className = 'badge bg-success';
				};
				
				eventSource.onmessage = function(event) {
					try {
						const data = JSON.parse(event.data);
						if (data.dynamicString) {
							currentTextElement.innerHTML = `<strong>${data.dynamicString}</strong>`;
						}
					} catch (error) {
						console.error('Error parsing SSE data:', error);
					}
				};
				
				eventSource.onerror = function() {
					connectionStatus.textContent = 'Disconnected';
					connectionStatus.className = 'badge bg-danger';
					
					// Attempt to reconnect after 3 seconds
					setTimeout(() => {
						connectionStatus.textContent = 'Reconnecting...';
						connectionStatus.className = 'badge bg-warning';
						connectSSE();
					}, 3000);
				};
			}
			
			// Start SSE connection
			connectSSE();
			
			// Form submission handler
			document.getElementById('updateForm').addEventListener('submit', async (e) => {
				e.preventDefault();
				const newText = document.getElementById('newText').value;
				const messageDiv = document.getElementById('message');
				
				try {
					const response = await fetch('/update/text', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ text: newText })
					});
					
					if (response.ok) {
						messageDiv.innerHTML = '<div class="alert alert-success">Text updated successfully! Changes are live on the main page.</div>';
						document.getElementById('newText').value = '';
					} else {
						messageDiv.innerHTML = '<div class="alert alert-danger">Error updating text</div>';
					}
				} catch (error) {
					messageDiv.innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
				}
			});
			
			// Clean up SSE connection when page unloads
			window.addEventListener('beforeunload', function() {
				if (eventSource) {
					eventSource.close();
				}
			});
		</script>
	</body>
</html>